---
# SPDX-FileCopyrightText: [[ copyright_date ]]-present [[ maintainer_fullname ]] <[[ maintainer_email ]]>
#
# SPDX-License-Identifier: MIT
#
# Terraform and OpenTofu tasks for the Task runner:
#
# https://taskfile.dev
#
# Requirements:
#
# - Git
# - POSIX shell
# - Terraform or OpenTofu
#
# It requires these environment variables:
#
# CONTEXT - TF configuration
# STACK - Name of stack
#
# Set these variables to override the defaults:
#
# PRODUCT_NAME - Name of project
# TF_CLI_EXE - The Terraform or OpenTofu executable to use
# VARIANT - Name of TF workspace
#
# Environment variable to toggle remote TF backend:
#
# ST_REMOTE_BACKEND - Enables remote TF backend
#
# ST_REMOTE_BACKEND is true if set with any value.
# Use the value "true" for consistency: ST_REMOTE_BACKEND=true
#
# yamllint disable rule:line-length

version: "3"

## Variables ##

vars:
  # Defaults
  DEFAULT_TF_CLI_EXE: terraform
  DEFAULT_VARIANT: default
  DEFAULT_PRODUCT_NAME:
    ref: "base .ROOT_DIR"

  # Variables to override

  # Override with TF_CLI_EXE to specify the Terraform or OpenTofu executable
  # To use OpenTofu, specify: TF_CLI_EXE=tofu
  CURRENT_TF_CLI_EXE:
    ref: "default .DEFAULT_TF_CLI_EXE .TF_CLI_EXE"
  # Override with VARIANT to specify the name of the TF workspace
  CURRENT_VARIANT:
    ref: "default .DEFAULT_VARIANT .VARIANT"
  # Override with PRODUCT_NAME to specify the name of the product or project
  CURRENT_PRODUCT_NAME:
    ref: "default .DEFAULT_PRODUCT_NAME .PRODUCT_NAME"

  # Calculated variables

  TF_TOOLS_CONTEXTS_DIR: "{{.ROOT_DIR}}/tf/contexts"
  TF_TOOLS_STACKS_DIR: "{{.ROOT_DIR}}/tf/definitions"
  TF_TOOLS_STACK_DIR: "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
  TF_TOOLS_TEMPLATES_DIR: "{{.ROOT_DIR}}/tf/templates"
  TF_TOOLS_TMP_DIR: "{{.ROOT_DIR}}/tmp/tf"

  TF_CLI_BACKEND_FALSE_OPT: "-backend=false"
  TF_CLI_CHDIR_OPT: "-chdir={{.TF_TOOLS_STACK_DIR}}"
  TF_CLI_VAR_FILES_OPT: "-var-file={{.TF_TOOLS_CONTEXTS_DIR}}/all/{{.STACK}}.tfvars -var-file={{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/{{.STACK}}.tfvars"

  TF_TOOLS_CONTEXTS:
    sh: ls -d {{.TF_TOOLS_CONTEXTS_DIR}}/*/ | xargs -n 1 basename

## Tasks ##

tasks:
  apply:
    desc: Apply TF stack
    deps: [plan]
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply {{.TF_CLI_PLAN_PATH}}"
    requires:
      vars: [CONTEXT, STACK]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_PLAN_PATH: "{{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-{{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_VARIANT}}.tfplan"

  check-fmt:
    desc: Check formatting of TF code for stack
    cmds:
      - for: { var: TF_TOOLS_CONTEXTS, split: "\n" }
        cmd: "{{.CURRENT_TF_CLI_EXE}} fmt -check -diff -recursive {{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt -check -diff -recursive"
    requires:
      vars: [STACK]

  clean:
    desc: Clean TF stack
    cmds:
      - "rm -fr {{.TF_TOOLS_STACK_DIR}}/.terraform"
    requires:
      vars: [STACK]

  console:
    desc: TF console for stack
    aliases:
      - shell
    interactive: true
    cmds:
      - terraform {{.TF_CLI_CHDIR_OPT}} console {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  contexts:
    desc: List contexts
    silent: true
    cmds:
      - for: { var: TF_TOOLS_CONTEXTS, split: "\n" }
        cmd: echo "{{.ITEM}}"

  destroy:
    desc: Destroy resources for TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply -destroy -auto-approve {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  fmt:
    desc: Format code for TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt"
      - for: { var: TF_TOOLS_CONTEXTS, split: "\n" }
        cmd: "{{.CURRENT_TF_CLI_EXE}} fmt {{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
    requires:
      vars: [STACK]

  init:
    desc: Init TF stack
    deps: [clean]
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} init {{.TF_CLI_BACKEND_OPT}}"
    requires:
      vars: [CONTEXT, STACK]
    vars:
      TF_CLI_BACKEND_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_CLI_BACKEND_CONFIG:
        ref: "fromJson .TF_CLI_BACKEND_DOCUMENT"
      TF_CLI_BACKEND_S3_OPT: "-backend-config=encrypt=true
        -backend-config=workspace_key_prefix=workspaces
        -backend-config=role_arn={{.TF_CLI_BACKEND_CONFIG.backend_s3.role_arn}}
        -backend-config=region={{.TF_CLI_BACKEND_CONFIG.backend_s3.region}}
        -backend-config=bucket={{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_bucket}}
        -backend-config=dynamodb_table={{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_ddb_table}}
        -backend-config=key=stacks/{{.CURRENT_PRODUCT_NAME}}/{{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_dir}}/{{.STACK}}.tfstate"
      # This is currently hard-coded to use S3 as the remote TF backend
      TF_CLI_BACKEND_OPT:
        sh: echo {{if .ST_REMOTE_BACKEND}}{{.TF_CLI_BACKEND_S3_OPT}}{{else}}{{.TF_CLI_BACKEND_FALSE_OPT}}{{end}}

  new:
    desc: Create new TF stack
    cmds:
      - mkdir -p "{{.TF_TOOLS_STACKS_DIR}}"
      - cp -r "{{.TF_TOOLS_TEMPLATES_DIR}}/definition" "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
      - task: new-stack-contexts
    requires:
      vars: [STACK]

  plan:
    desc: Create TF plan for stack
    deps: [ensure-tmp-dir]
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} plan -out={{.TF_CLI_PLAN_PATH}} {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_PLAN_PATH: "{{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-{{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_VARIANT}}.tfplan"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  rm:
    desc: Remove code for TF stack
    cmds:
      - rm -fr "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
      - task: rm-stack-contexts
    requires:
      vars: [STACK]

  stacks:
    desc: List TF stacks
    silent: true
    cmds:
      - for: { var: TF_TOOLS_STACKS, split: "\n" }
        cmd: echo "{{.ITEM}}"
    vars:
      TF_TOOLS_STACKS:
        sh: ls -d {{.TF_TOOLS_STACKS_DIR}}/*/ | xargs -n 1 basename

  test:
    desc: Run TF test for stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} test {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  validate:
    desc: Validate TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} validate"
    requires:
      vars: [STACK]

  ## Internal tasks ##

  ensure-tmp-dir:
    desc: Ensure that temporary directory exists for TF
    internal: true
    cmds:
      - mkdir -p "{{.TF_TOOLS_TMP_DIR}}"

  new-stack-contexts:
    desc: Add context files for TF stack
    internal: true
    cmds:
      - for: { var: TF_TOOLS_CONTEXTS, split: "\n" }
        cmd: cp "{{.TF_TOOLS_TEMPLATES_DIR}}/context/standard.tfvars" "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"

  rm-stack-contexts:
    desc: Remove context files for TF stack
    internal: true
    cmds:
      - for: { var: TF_TOOLS_CONTEXTS, split: "\n" }
        cmd: rm -f "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
