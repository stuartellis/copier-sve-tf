---
# SPDX-FileCopyrightText: {{ copyright_date }}-present {{ maintainer_fullname }} <{{ maintainer_email }}>
#
# SPDX-License-Identifier: MIT
#
# TF tasks for the Task runner:
#
# https://taskfile.dev
#
# Requires these environment variables:
#
# ENV
# STACK
# VARIANT
# PRODUCT_NAME

version: "3"

vars:
  TF_CLI_EXE: terraform

  TF_CLI_STATE_NAME: "{{.PRODUCT_NAME}}-{{.STACK}}-{{.ENV}}-{{.VARIANT}}"

  TF_CLI_BACKEND_FALSE_OPT: "-backend=false"

  TF_CLI_PLAN_DIR: "{{.ROOT_DIR}}/tmp/tf"
  TF_CLI_ENVS_DIR: "{{.ROOT_DIR}}/tf/environments"
  TF_CLI_TEMPLATES_DIR: "tf/templates"
  TF_CLI_STACKS_DIR: "tf/definitions"
  TF_CLI_WORKING_DIR: "{{.TF_CLI_STACKS_DIR}}/{{.STACK}}"
  TF_CLI_CHDIR_OPT: "-chdir={{.TF_CLI_WORKING_DIR}}"

  TF_CLI_PLAN_PATH: "{{.TF_CLI_PLAN_DIR}}/{{.TF_CLI_STATE_NAME}}.tfplan"
  TF_CLI_PLAN_OPT: "-out={{.TF_CLI_PLAN_PATH}}"
  TF_CLI_VARS_OPT: "-var='product_name={{.PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.ENV}}' -var='variant={{.VARIANT}}'"
  TF_CLI_VAR_FILES_OPT: "-var-file={{.TF_CLI_ENVS_DIR}}/all/{{.STACK}}.tfvars -var-file={{.TF_CLI_ENVS_DIR}}/{{.ENV}}/{{.STACK}}.tfvars"

  STACK_ENVS: all,dev,prod,staging,test

tasks:
  apply:
    desc: Apply stack
    deps: [plan]
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply {{.TF_CLI_PLAN_PATH}}"
    requires:
      vars: [ENV, STACK]

  check-fmt:
    desc: Check formatting of TF code for stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt -check -diff -recursive"
    requires:
      vars: [STACK]

  destroy:
    desc: Destroy stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply -destroy -auto-approve {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [ENV, STACK]

  fmt:
    desc: Format code for stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt"
    requires:
      vars: [STACK]

  init:
    desc: Init stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} init {{.TF_CLI_BACKEND_OPT}}"
    requires:
      vars: [ENV, STACK]
    vars:
      TF_CLI_BACKEND_OPT:
        sh: echo {{.TF_CLI_BACKEND_FALSE_OPT}}

  new:
    desc: Create new stack
    cmds:
      - cp -r "{{.TF_CLI_TEMPLATES_DIR}}/stack" "{{.TF_CLI_STACKS_DIR}}/{{.STACK}}"
      - task: new-stack-envs
    requires:
      vars: [STACK]

  plan:
    desc: Create TF plan for stack
    deps: [ensure-temp-dir]
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} plan {{.TF_CLI_PLAN_OPT}} {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [ENV, STACK]

  rm:
    desc: Remove code for stack
    cmds:
      - rm -fr "{{.TF_CLI_STACKS_DIR}}/{{.STACK}}"
      - task: rm-stack-envs
    requires:
      vars: [STACK]

  shell:
    desc: TF console for stack
    aliases:
      - console
    interactive: true
    cmds:
      - terraform {{.TF_CLI_CHDIR_OPT}} console {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}
    requires:
      vars: [ENV, STACK]

  test:
    desc: Run test for TF stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} test {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [ENV, STACK]

  validate:
    desc: Validate stack
    cmds:
      - "{{.TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} validate"
    requires:
      vars: [STACK]

  ## Internal tasks ##

  new-stack-envs:
    desc: Add environments for stack
    internal: true
    cmds:
      - for: { var: STACK_ENVS, split: "," }
        cmd: cp "{{.TF_CLI_TEMPLATES_DIR}}/environments/{{.ITEM}}.tfvars" "{{.TF_CLI_ENVS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"

  rm-stack-envs:
    desc: Remove environments for stack
    internal: true
    cmds:
      - for: { var: STACK_ENVS, split: "," }
        cmd: rm "{{.TF_CLI_ENVS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"

  ensure-temp-dir:
    desc: Ensure that temporary directory exists
    internal: true
    cmds:
      - mkdir -p "{{.TF_CLI_PLAN_DIR}}"
